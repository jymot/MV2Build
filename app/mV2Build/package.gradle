apply plugin: 'im.wangchao.build'

mV2Build{

    /**
     * 渠道配置文件
     */
    configFile = new File("${project.getProjectDir()}/mV2Build/config.json")


    /**
    * 需要清除渠道的 APK。如果配置该项，那么会有 clearChannel Task 提供使用，
    * 该 Task 会请空指定 APK 的渠道信息。
    */
    clearChannelApkFile = new File("${project.buildDir}/outputs/channel/app-release-测试渠道.apk")

    /**
     * 需要打印渠道信息的 APK。如果配置该项，那么会有 printChannelInfo Task 提供使用。
     */
    printChannelApkFile = new File("${project.buildDir}/outputs/channel/app-release-测试渠道1.apk")

    /**
     * 在打包前，需要最先执行的脚本，执行顺序由数组顺序决定。
     * 数组的值为需要执行脚本的绝对路径。
     * 注意脚本中，如果使用相对路径，那么该相对路径是相对于项目根目录的，也就是${project.getRootDir()}
     */
    preBuildScript = []

    /**
     * Multi-Channel
     */
    channel {
        /**
         * Multi-Channel 输出目录
         */
        outputDir = new File("${project.buildDir}/outputs/channel")
        /**
         * 执行 assembleReleaseChannel Task 输出 APK 的文件格式，可以不设置，默认为${appName}-release-${channel}
         */
//    apkFileNameFormat = '${appName}-release-${channel}-test.apk'
        /**
         * 需要写入渠道的 APK。如果配置该项，那么会有 onlyWriteChannel Task 提供使用，
         * 该 Task 只是将已经打好的包根据配置文件，写入渠道。
         */
        writeChannelApkFile = new File("${project.buildDir}/outputs/apk/release/app-release.apk")
        /**
         * AndroidManifest.xml 文件
         */
//        manifestFile = new File("${project.getProjectDir()}/src/main/AndroidManifest.xml")
        /**
         * 依赖的变种类型，可以不设置，默认为 release
         */
//        buildType = "release"
    }

}
